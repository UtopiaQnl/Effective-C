-o {name}   :Название для выходного файла


-S  :Ассемблирование файла. Только компиляция, без ассемблирования сборки и компоновки.


-E  :Вывод препроцессора. Только препроцессинг, без компиляции, сборки и компоновки.


-C  :Создать только скомпилированный код.


-c  :Компиляция. Компиляция и сборка, но без компоновки.


-g  :Создаёт отладочную информацию в объектный (или исполняемый) файл. Полезен при отладке.


-v :Получить подробный вывод при компиляции программы.


-save-temps     :Создает все промежуточные состоянии при работе компилятора (препроцессор, ассемблер, объектник, исполняемый)


-std=...    :Включить стандарт языка.


-L<path>\-l<name>   :Подключает (связывает) общую библиотеку и программу

    -l<name>    :Подключает общую стандартную библиотеку (которая находится в стандартных путях)

        ```gcc -lm ./some.c``` - подключение библиотеки <math.h>

    -L<path>    :Подключает свою библиотку, указывая путь на её местоположение

        ```gcc -L./bin/,/home/usr/so ./temp.c``` - подключает билбиотеки, которых найдет в ./bin/ и в /home/usr/so


-I<path>    :Подключает дополнительные каталоги для видимости компилятора (например для поиска header.h файлов)
 

-O1\-O2\-O3   :Оптимизация компиляции

    -O0 (O ноль) - это самые простые и примитивные оптимизации.
    -O1 - более сильные оптимизации.
    -O2 - оптимизировать все, что можно, но только проверенные и надежные оптимизации. (использует инструкции процессора)
    -O3 - жесткая и насильная оптимизация, применяются экспериментальные методы.

    -01 - для дебагинга.
    -Os - оптимизировать по размеру.


-Wall   :Включает все предупреждения


-Wextra     :Включает дополнительные предупреждения


-Werror     :Обрабатывает предупреждения как ошибки


-Wundef     :Предупреждать, если неопределенный идентификатор оценивается в #if. Такие идентификаторы заменяются нулем. 


-Wshadow    :Предупреждать, если какая либо локальная переменная перекрывает что-то другое.


-Walloca    :Предупреждает о использовании intrinics функции alloc (которая не желательна)


-Wvla    :Предупреждает о использовании VLA


-fexec-charset=кодировка 	:Ставит кодировку для интерпретации символов.


–finput-charset=кодировка	:Ставит кодировку для вводимых симоволов.


–fwide-exec-charset=кодировка 	:Ставит кодировку для широких* симовлов.


-Wvla-larger-than=size     :Для диагностики определений VLA, которые либо превышают заданный размер, либо имеют недостаточно жесткие границы


-Wframe-larger-than=size     :Для диагностики определения размера кадра стека, которые либо превышают заданный размер, либо имеют недостаточно жесткие границы


-Wpedantic\-pedantic    :Строго придерживать стандарта Си (включает больше предупреждений)


-Wfloat-equal   :Проверяет сравнение с вещественными числами


-Wstrict-prototypes     :Предупреждать, если функция объявлена или определена без указания типов аргументов. (int main())


-Wswitch-default    :Предупреждать всякий раз, когда switch заявление не имеет default


-Wswitch-enum   :Предупреждать всякий раз, когда switch оператор имеет индекс перечисляемого типа и не имеет case для одного или нескольких именованных кодов этого перечисления.


-Wconversion    :Предупреждать о неявных преобразованиях, которые могут изменить значение.


-Wimplicit-fallthrough  :Предупредит, если break отсутствует в switch-case операторе.


-Wunreachable-code  :Предупреждать, если компилятор обнаружит, что код никогда не будет выполнен.


-Wformat=2  :Включить мощные проверки для printf и scanf


-Wparentheses   :Проверит ошибочные логические сравнения
    
    ```if (a < c < b)   <=>   if ((a < c) < b)```


-Wmisleading-indentation    :Проверит наличие ошибочного форматирования строк.

    ``` Error
    if (some_condition)
        puts("OK");
        some_instruction(1);  // always too
    always();
    ```


-fPIC   :Получение объектника с позиционно-независимым кодом
    
    ```gcc -c -Wall -Wextra -fPIC main.c```  # выдает main.o в позиционно-независимым кодом


@<name>     :Запускает файл с именем name, которы должен включать в себя аргуенты
    
    # в flags находится строка вида "-Wall -Wextra"

    ```gcc main.c -o main @flags   <=>   gcc main.c -o main -Wall -Wextra```


-D<marco>[=<value>]   :Определить макрос с именем marco на время выполения программы. Это полезно, когда вы хотите запустить один и тот же
                код несколькими способами, чтобы код зависел от этого макроса или, возможно, для отладки

